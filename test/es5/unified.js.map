{"version":3,"sources":["../es6/unified.js"],"names":["Promise","require","assert","_","async","coroutine","arrayFire","ArrayFire","describe","af","beforeEach","afterEach","release","it","isObject","backend","isFunction","getAvailableBackends","cpu","CPU","cuda","CUDA","ocl","OPENCL","equal","getBackendCount","tryBackend","setBackend","strictEqual","getActiveBackend","e","code","Error","enumToString","message","skip"],"mappings":"AAAA;;AACA,IAAMA,UAAUC,QAAQ,UAAR,CAAhB;AACA,IAAMC,SAASD,QAAQ,QAAR,CAAf;AACA,IAAME,IAAIF,QAAQ,QAAR,CAAV;AACA,IAAMG,QAAQJ,QAAQK,SAAtB;AACA,IAAMC,YAAYL,QAAQ,OAAR,CAAlB;AACA,IAAMM,YAAYD,UAAUC,SAA5B;;AAEAC,SAAS,2BAAT,EAAsC,YAAY;AAC9C,QAAIC,KAAK,IAAT;;AAEAC,eAAW,YAAY;AACnBD,aAAK,IAAIF,SAAJ,EAAL;AACH,KAFD;;AAIAI,cAAU,YAAY;AAClB,YAAIF,EAAJ,EAAQ;AACJA,eAAGG,OAAH;AACAH,iBAAK,IAAL;AACH;AACJ,KALD;;AAOAI,OAAG,gCAAH,EAAqC,YAAY;AAC7CX,eAAOC,EAAEW,QAAF,CAAWL,GAAGM,OAAd,CAAP;AACAb,eAAOC,EAAEa,UAAF,CAAaP,GAAGQ,oBAAhB,CAAP;;AAEA,YAAMC,MAAMT,GAAGQ,oBAAH,KAA4BR,GAAGM,OAAH,CAAWI,GAAnD;AACA,YAAMC,OAAOX,GAAGQ,oBAAH,KAA4BR,GAAGM,OAAH,CAAWM,IAApD;AACA,YAAMC,MAAMb,GAAGQ,oBAAH,KAA4BR,GAAGM,OAAH,CAAWQ,MAAnD;;AAEArB,eAAOgB,QAAQE,QAAQE,GAAhB,CAAP;AACApB,eAAOsB,KAAP,CAAaf,GAAGgB,eAAH,EAAb,EAAmC,CAACP,OAAO,CAAR,KAAcE,QAAQ,CAAtB,KAA4BE,OAAO,CAAnC,CAAnC;AACH,KAVD;;AAYAT,OAAG,iCAAH,EAAsC,YAAY;AAC9C,YAAMO,OAAOX,GAAGQ,oBAAH,KAA4BR,GAAGM,OAAH,CAAWM,IAApD;AACA,YAAMC,MAAMb,GAAGQ,oBAAH,KAA4BR,GAAGM,OAAH,CAAWQ,MAAnD;;AAEAH,gBAAQM,WAAWjB,GAAGM,OAAH,CAAWM,IAAtB,CAAR;AACAC,eAAOI,WAAWjB,GAAGM,OAAH,CAAWQ,MAAtB,CAAP;AACAG,mBAAWjB,GAAGM,OAAH,CAAWI,GAAtB;;AAEA,iBAASO,UAAT,CAAoBX,OAApB,EAA6B;AACzB,gBAAI;AACAN,mBAAGkB,UAAH,CAAcZ,OAAd;AACAb,uBAAO0B,WAAP,CAAmBnB,GAAGoB,gBAAH,EAAnB,EAA0Cd,OAA1C;AACH,aAHD,CAIA,OAAOe,CAAP,EAAU;AACN,oBAAIA,EAAEC,IAAF,KAAW,GAAf,EAAoB;AAChB;AACH;AACD,oBAAID,EAAEC,IAAN,EAAY;AACR,0BAAMC,8BAA6BvB,GAAGwB,YAAH,CAAgBxB,GAAGM,OAAnB,EAA4BA,OAA5B,CAA7B,gBAA8Ee,EAAEC,IAAhF,mBAAoGD,EAAEI,OAAtG,CAAN;AACH;AACD,sBAAMJ,CAAN;AACH;AACJ;AACJ,KAvBD;;AAyBAjB,OAAGsB,IAAH,6DAAmE,YAAY;AAC3EjC,eAAO,KAAP,EAAc,MAAd;AACH,KAFD;AAGH,CAtDD","file":"unified.js","sourcesContent":["'use strict';\nconst Promise = require('bluebird');\nconst assert = require('assert');\nconst _ = require('lodash');\nconst async = Promise.coroutine;\nconst arrayFire = require('../..');\nconst ArrayFire = arrayFire.ArrayFire;\n\ndescribe('unified backend functions', function () {\n    let af = null;\n\n    beforeEach(function () {\n        af = new ArrayFire();\n    });\n\n    afterEach(function () {\n        if (af) {\n            af.release();\n            af = null;\n        }\n    });\n\n    it('should give available backends', function () {\n        assert(_.isObject(af.backend));\n        assert(_.isFunction(af.getAvailableBackends));\n\n        const cpu = af.getAvailableBackends() & af.backend.CPU;\n        const cuda = af.getAvailableBackends() & af.backend.CUDA;\n        const ocl = af.getAvailableBackends() & af.backend.OPENCL;\n\n        assert(cpu && (cuda || ocl));\n        assert.equal(af.getBackendCount(), (cpu && 1) + (cuda && 1) + (ocl && 1));\n    });\n\n    it('should switch to other backends', function () {\n        const cuda = af.getAvailableBackends() & af.backend.CUDA;\n        const ocl = af.getAvailableBackends() & af.backend.OPENCL;\n\n        cuda && tryBackend(af.backend.CUDA);\n        ocl && tryBackend(af.backend.OPENCL);\n        tryBackend(af.backend.CPU);\n\n        function tryBackend(backend) {\n            try {\n                af.setBackend(backend);\n                assert.strictEqual(af.getActiveBackend(), backend);\n            }\n            catch (e) {\n                if (e.code === 501) {\n                    return;\n                }\n                if (e.code) {\n                    throw Error(`Error with backend ${ af.enumToString(af.backend, backend) }, code: ${ e.code }, message: ${ e.message }`);\n                }\n                throw e;\n            }\n        }\n    });\n\n    it.skip(`should give back array's backend and device information`, function () {\n        assert(false, 'TODO');\n    });\n});"]}