{"version":3,"sources":["../es6/device.js"],"names":["Promise","require","assert","_","async","coroutine","arrayFire","ArrayFire","describe","af","afterEach","release","it","isFunction","deviceInfo","name","platform","toolkit","compute","isString","value","length","infoString","info","vInfo","getDeviceCount","count","getDevice","setDevice","sync","id","strictEqual","setSeed"],"mappings":"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","file":"device.js","sourcesContent":["'use strict';\nconst Promise = require('bluebird');\nconst assert = require('assert');\nconst _ = require('lodash');\nconst async = Promise.coroutine;\nconst arrayFire = require('../..');\nconst ArrayFire = arrayFire.ArrayFire;\n\ndescribe('device functions', function () {\n    let af = null;\n\n    afterEach(function () {\n        if (af) {\n            af.release();\n            af = null;\n        }\n    });\n\n    it('should give result for deviceInfo (sync)', function () {\n        af = new ArrayFire();\n        assert(_.isFunction(af.deviceInfo));\n        const name = {};\n        const platform = {};\n        const toolkit = {};\n        const compute = {};\n        af.deviceInfo(name, platform, toolkit, compute);\n        assert(_.isString(name.value) && name.value.length);\n        assert(_.isString(platform.value) && platform.value.length);\n        assert(_.isString(toolkit.value) && toolkit.value.length);\n        assert(_.isString(compute.value) && compute.value.length);\n    });\n\n    it('should give result for deviceInfo (async)', async(function* () {\n        af = new ArrayFire({ async: true });\n        assert(_.isFunction(af.deviceInfo));\n        const name = {};\n        const platform = {};\n        const toolkit = {};\n        const compute = {};\n        yield af.deviceInfo(name, platform, toolkit, compute);\n        assert(_.isString(name.value) && name.value.length);\n        assert(_.isString(platform.value) && platform.value.length);\n        assert(_.isString(toolkit.value) && toolkit.value.length);\n        assert(_.isString(compute.value) && compute.value.length);\n    }));\n\n    it('should give result for infoString (sync)', function () {\n        af = new ArrayFire();\n        assert(_.isFunction(af.infoString));\n        const info = af.infoString();\n        assert(_.isString(info) && info.length);\n        const vInfo = af.infoString(true);\n        assert(_.isString(vInfo) && vInfo.length);\n        assert(vInfo.length >= info.length);\n    });\n\n    it('should give result for infoString (async)', async(function* () {\n        af = new ArrayFire({ async: true });\n        assert(_.isFunction(af.infoString));\n        const info = yield af.infoString();\n        assert(_.isString(info) && info.length);\n        const vInfo = yield af.infoString(true);\n        assert(_.isString(vInfo) && vInfo.length);\n        assert(vInfo.length >= info.length);\n    }));\n\n    it('should report device count (sync)', function () {\n        af = new ArrayFire();\n        assert(_.isFunction(af.getDeviceCount));\n        const count = af.getDeviceCount();\n        assert(count > 0 && count < 10);\n    });\n\n    it('should report device count (async)', async(function* () {\n        af = new ArrayFire({ async: true });\n        assert(_.isFunction(af.getDeviceCount));\n        const count = yield af.getDeviceCount();\n        assert(count > 0 && count < 10);\n    }));\n\n    it('should set and get device ids (sync)', function () {\n        af = new ArrayFire();\n        const count = af.getDeviceCount();\n        assert(count > 0 && count < 10);\n        assert(_.isFunction(af.getDevice));\n        assert(_.isFunction(af.setDevice));\n        assert(_.isFunction(af.sync));\n        for (let id = count - 1; id >= 0; id--) {\n            af.setDevice(id);\n            assert.strictEqual(af.getDevice(), id);\n            af.sync(id);\n            af.sync(); // -1 = current\n        }\n    });\n\n    it('should set and get device ids (async)', async(function* () {\n        af = new ArrayFire({ async: true });\n        const count = yield af.getDeviceCount();\n        assert(count > 0 && count < 10);\n        assert(_.isFunction(af.getDevice));\n        assert(_.isFunction(af.setDevice));\n        assert(_.isFunction(af.sync));\n        for (let id = count - 1; id >= 0; id--) {\n            yield af.setDevice(id);\n            assert.strictEqual(yield af.getDevice(), id);\n            yield af.sync(id);\n            yield af.sync(); // -1 = current\n        }\n    }));\n\n    it('should set seed', function () {\n        af = new ArrayFire();\n        assert(_.isFunction(af.setSeed));\n        af.setSeed(42);\n    });\n});"]}