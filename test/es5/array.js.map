{"version":3,"sources":["../es6/array.js"],"names":["Promise","require","assert","_","async","coroutine","arrayFireJs","ArrayFire","fastcall","ArrayType","FloatArray","IntArray","ref","describe","af","beforeEach","scope","begin","afterEach","end","release","only","it","arr","afArr","dims","buff","refArr","array","strictEqual","elements","ndims","Float32Array","host","Buffer","isBuffer","equal","length","get","set","buffer","dim4","dtype","s32","type","f32","refType","types","float","skip"],"mappings":"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","file":"array.js","sourcesContent":["'use strict';\nconst Promise = require('bluebird');\nconst assert = require('assert');\nconst _ = require('lodash');\nconst async = Promise.coroutine;\nconst arrayFireJs = require('../..');\nconst ArrayFire = arrayFireJs.ArrayFire;\nconst fastcall = require('fastcall');\nconst ArrayType = fastcall.ArrayType;\nconst FloatArray = new ArrayType('float');\nconst IntArray = new ArrayType('int32');\nconst ref = fastcall.ref;\n\ndescribe('array', function () {\n    let af = null;\n\n    beforeEach(function () {\n        af = new ArrayFire();\n        af.scope.begin();\n    });\n\n    afterEach(function () {\n        if (af) {\n            af.scope.end();\n            af.release();\n            af = null;\n        }\n    });\n\n    describe.only('construct', function () {\n        it('should work synchronously', function () {\n            let arr;\n            let afArr;\n            let dims;\n            let buff;\n            let refArr;\n\n            arr = [1, 2];\n            afArr = af.array(arr);\n            dims = afArr.dims();\n            assert.strictEqual(dims[0], 2);\n            assert.strictEqual(dims[1], 1);\n            assert.strictEqual(dims[2], 1);\n            assert.strictEqual(dims[3], 1);\n            assert.strictEqual(dims.elements, 2);\n            assert.strictEqual(dims.ndims, 1);\n            assert.strictEqual(afArr.dims(0), 2);\n            assert.strictEqual(afArr.dims(1), 1);\n            assert.strictEqual(afArr.dims(2), 1);\n            assert.strictEqual(afArr.dims(3), 1);\n\n            arr = new Float32Array([1, 2]);\n            afArr = af.array(arr);\n            dims = afArr.dims();\n            assert.strictEqual(dims[0], 2);\n            assert.strictEqual(dims[1], 1);\n            assert.strictEqual(dims[2], 1);\n            assert.strictEqual(dims[3], 1);\n            assert.strictEqual(dims.elements, 2);\n            assert.strictEqual(dims.ndims, 1);\n            assert.strictEqual(afArr.dims(0), 2);\n            assert.strictEqual(afArr.dims(1), 1);\n            assert.strictEqual(afArr.dims(2), 1);\n            assert.strictEqual(afArr.dims(3), 1);\n            buff = afArr.host();\n            assert(Buffer.isBuffer(buff));\n            refArr = new FloatArray(buff);\n            assert.equal(refArr.length, 2);\n            assert.equal(refArr.get(0), 1);\n            assert.equal(refArr.get(1), 2);\n            refArr.set(0, 0);\n            refArr.set(1, 0);\n            assert.equal(refArr.get(0), 0);\n            assert.equal(refArr.get(1), 0);\n            afArr.host(refArr.buffer);\n            assert.equal(refArr.length, 2);\n            assert.equal(refArr.get(0), 1);\n            assert.equal(refArr.get(1), 2);\n\n            arr = new FloatArray(2);\n            arr.set(0, 1);\n            arr.set(1, 2);\n            afArr = af.array(af.dim4(1, 2), arr.buffer);\n            dims = afArr.dims();\n            assert.strictEqual(dims[0], 1);\n            assert.strictEqual(dims[1], 2);\n            assert.strictEqual(dims[2], 1);\n            assert.strictEqual(dims[3], 1);\n            assert.strictEqual(dims.elements, 2);\n            assert.strictEqual(dims.ndims, 2);\n\n            afArr = af.array(af.dim4(3), af.dtype.s32);\n            dims = afArr.dims();\n            assert.strictEqual(dims[0], 3);\n            assert.strictEqual(dims[1], 1);\n            assert.strictEqual(dims[2], 1);\n            assert.strictEqual(dims[3], 1);\n            assert.strictEqual(dims.elements, 3);\n            assert.strictEqual(dims.ndims, 1);\n            buff = afArr.host();\n            assert(Buffer.isBuffer(buff));\n            refArr = new IntArray(buff);\n            assert.equal(refArr.length, 3);\n\n            afArr = af.array(af.dim4(1, 3));\n            dims = afArr.dims();\n            assert.strictEqual(dims[0], 1);\n            assert.strictEqual(dims[1], 3);\n            assert.strictEqual(dims[2], 1);\n            assert.strictEqual(dims[3], 1);\n            assert.strictEqual(dims.elements, 3);\n            assert.strictEqual(dims.ndims, 2);\n            assert.strictEqual(afArr.type(), af.dtype.f32);\n            assert.strictEqual(afArr.refType(), ref.types.float);\n\n            arr = [1, 2, 3, 4];\n            afArr = af.array(af.dim4(1, 1, 4), arr, af.dtype.s32);\n            dims = afArr.dims();\n            assert.strictEqual(dims[0], 1);\n            assert.strictEqual(dims[1], 1);\n            assert.strictEqual(dims[2], 4);\n            assert.strictEqual(dims[3], 1);\n            assert.strictEqual(dims.elements, 4);\n            assert.strictEqual(dims.ndims, 3);\n            buff = afArr.host();\n            // assert(Buffer.isBuffer(buff));\n            // refArr = new IntArray(buff);\n            // assert.equal(refArr.length, 4);\n            // assert.equal(refArr.get(0), 1);\n            // assert.equal(refArr.get(1), 2);\n            // assert.equal(refArr.get(2), 3);\n            // assert.equal(refArr.get(3), 4);\n\n            /*\n            arr = [one(Int32) zero(Int32)]\n            afArr = array(af, arr, 2)\n            @test [2, 1, 1, 1] == dims(afArr)\n            @test (2, ) == size(afArr)\n            @test host(afArr) == [one(Int32), zero(Int32)]\n            @test dType(afArr) == s32\n            @test numdims(afArr) == length(size(afArr))\n            */\n        });\n\n        it.skip('should work asynchronously', async(function* () {\n        }));\n    });\n});"]}