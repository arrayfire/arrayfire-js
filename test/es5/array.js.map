{"version":3,"sources":["../es6/array.js"],"names":["Promise","require","assert","_","async","coroutine","arrayFireJs","ArrayFire","fastcall","ArrayType","FloatArray","IntArray","ref","describe","af","beforeEach","scope","begin","afterEach","end","release","it","arr","afArr","dims","buff","refArr","array","strictEqual","elements","ndims","Float32Array","host","Buffer","isBuffer","equal","length","get","set","buffer","dim4","dtype","s32","type","f32","refType","types","float","only","indexed","numdims","index","seq","deepEqual","toArray","idx","span"],"mappings":"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","file":"array.js","sourcesContent":["'use strict';\nconst Promise = require('bluebird');\nconst assert = require('assert');\nconst _ = require('lodash');\nconst async = Promise.coroutine;\nconst arrayFireJs = require('../..');\nconst ArrayFire = arrayFireJs.ArrayFire;\nconst fastcall = require('fastcall');\nconst ArrayType = fastcall.ArrayType;\nconst FloatArray = new ArrayType('float');\nconst IntArray = new ArrayType('int32');\nconst ref = fastcall.ref;\n\ndescribe('AFArray', function () {\n    describe('sync', function () {\n        let af = null;\n\n        beforeEach(function () {\n            af = new ArrayFire();\n            af.scope.begin();\n        });\n\n        afterEach(function () {\n            if (af) {\n                af.scope.end();\n                af.release();\n                af = null;\n            }\n        });\n\n        it('could be created by calling af.array()', function () {\n            let arr;\n            let afArr;\n            let dims;\n            let buff;\n            let refArr;\n\n            arr = [1, 2];\n            afArr = af.array(arr);\n            dims = afArr.dims();\n            assert.strictEqual(dims[0], 2);\n            assert.strictEqual(dims[1], 1);\n            assert.strictEqual(dims[2], 1);\n            assert.strictEqual(dims[3], 1);\n            assert.strictEqual(dims.elements, 2);\n            assert.strictEqual(dims.ndims, 1);\n            assert.strictEqual(afArr.dims(0), 2);\n            assert.strictEqual(afArr.dims(1), 1);\n            assert.strictEqual(afArr.dims(2), 1);\n            assert.strictEqual(afArr.dims(3), 1);\n\n            arr = new Float32Array([1, 2]);\n            afArr = af.array(arr);\n            dims = afArr.dims();\n            assert.strictEqual(dims[0], 2);\n            assert.strictEqual(dims[1], 1);\n            assert.strictEqual(dims[2], 1);\n            assert.strictEqual(dims[3], 1);\n            assert.strictEqual(dims.elements, 2);\n            assert.strictEqual(dims.ndims, 1);\n            assert.strictEqual(afArr.dims(0), 2);\n            assert.strictEqual(afArr.dims(1), 1);\n            assert.strictEqual(afArr.dims(2), 1);\n            assert.strictEqual(afArr.dims(3), 1);\n            buff = afArr.host();\n            assert(Buffer.isBuffer(buff));\n            refArr = new FloatArray(buff);\n            assert.equal(refArr.length, 2);\n            assert.equal(refArr.get(0), 1);\n            assert.equal(refArr.get(1), 2);\n            refArr.set(0, 0);\n            refArr.set(1, 0);\n            assert.equal(refArr.get(0), 0);\n            assert.equal(refArr.get(1), 0);\n            afArr.host(refArr.buffer);\n            assert.equal(refArr.length, 2);\n            assert.equal(refArr.get(0), 1);\n            assert.equal(refArr.get(1), 2);\n\n            arr = new FloatArray(2);\n            arr.set(0, 1);\n            arr.set(1, 2);\n            afArr = af.array(af.dim4(1, 2), arr.buffer);\n            dims = afArr.dims();\n            assert.strictEqual(dims[0], 1);\n            assert.strictEqual(dims[1], 2);\n            assert.strictEqual(dims[2], 1);\n            assert.strictEqual(dims[3], 1);\n            assert.strictEqual(dims.elements, 2);\n            assert.strictEqual(dims.ndims, 2);\n\n            afArr = af.array(af.dim4(3), af.dtype.s32);\n            dims = afArr.dims();\n            assert.strictEqual(dims[0], 3);\n            assert.strictEqual(dims[1], 1);\n            assert.strictEqual(dims[2], 1);\n            assert.strictEqual(dims[3], 1);\n            assert.strictEqual(dims.elements, 3);\n            assert.strictEqual(dims.ndims, 1);\n            buff = afArr.host();\n            assert(Buffer.isBuffer(buff));\n            refArr = new IntArray(buff);\n            assert.equal(refArr.length, 3);\n\n            afArr = af.array(af.dim4(1, 3));\n            dims = afArr.dims();\n            assert.strictEqual(dims[0], 1);\n            assert.strictEqual(dims[1], 3);\n            assert.strictEqual(dims[2], 1);\n            assert.strictEqual(dims[3], 1);\n            assert.strictEqual(dims.elements, 3);\n            assert.strictEqual(dims.ndims, 2);\n            assert.strictEqual(afArr.type(), af.dtype.f32);\n            assert.strictEqual(afArr.refType(), ref.types.float);\n\n            arr = [1, 2, 3, 4];\n            afArr = af.array(af.dim4(1, 1, 4), arr, af.dtype.s32);\n            dims = afArr.dims();\n            assert.strictEqual(dims[0], 1);\n            assert.strictEqual(dims[1], 1);\n            assert.strictEqual(dims[2], 4);\n            assert.strictEqual(dims[3], 1);\n            assert.strictEqual(dims.elements, 4);\n            assert.strictEqual(dims.ndims, 3);\n            buff = afArr.host();\n            assert(Buffer.isBuffer(buff));\n            refArr = new IntArray(buff);\n            assert.equal(refArr.length, 4);\n            assert.equal(refArr.get(0), 1);\n            assert.equal(refArr.get(1), 2);\n            assert.equal(refArr.get(2), 3);\n            assert.equal(refArr.get(3), 4);\n        });\n\n        it.only('should support .index() for various parameter types', function () {\n            let afArr;\n            let indexed;\n            let arr;\n            let dims;\n\n            afArr = af.array([1, 2, 3, 4, 5]);\n            dims = afArr.dims();\n            assert.strictEqual(dims[0], 5);\n            assert.strictEqual(dims[1], 1);\n            assert.strictEqual(dims[2], 1);\n            assert.strictEqual(dims[3], 1);\n            assert.strictEqual(afArr.elements(), 5);\n            assert.strictEqual(afArr.numdims(), 1);\n\n            indexed = afArr.index(af.seq(1));\n            assert.deepEqual(indexed.toArray(), [2]);\n\n            indexed = afArr.index(2);\n            assert.deepEqual(indexed.toArray(), [3]);\n\n            indexed = afArr.index(af.seq(1, 3));\n            assert.deepEqual(indexed.toArray(), [2, 3, 4]);\n\n            afArr = af.array(af.dim4(4, 4),\n                 [1,  2,  3,  4,\n                  5,  6,  7,  8,\n                  9, 10, 11, 12,\n                 13, 14, 15, 16]);\n\n            assert.strictEqual(afArr.elements(), 16);\n            assert.strictEqual(afArr.numdims(), 2);\n            assert.strictEqual(afArr.dims(0), 4);\n            assert.strictEqual(afArr.dims(1), 4);\n\n            indexed = afArr.index(af.seq(2, 4));\n            assert.deepEqual(indexed.toArray(), [3, 4, 5]);\n\n            indexed = afArr.index(af.idx(af.seq(0, 2), af.seq(1, 2)));\n            assert.deepEqual(indexed.toArray(), [5, 6, 7, 9, 10, 11]);\n\n            indexed = afArr.index(af.idx(af.end, af.seq(2, 3)));\n            assert.deepEqual(indexed.toArray(), [12, 16]);\n\n            indexed = afArr.index(af.span);\n            assert.deepEqual(indexed.toArray(), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\n\n            indexed = afArr.index(af.idx(1, af.span));\n            assert.deepEqual(indexed.toArray(), [2, 6, 10, 14]);\n\n            /*\n            afArr = array(af, [1, 2, 3, 4, 5])\n            afIdx = array(af, [1.0f0, 0.0f0, 2.0f0])\n            indexed = afArr[afIdx]\n            @test host(indexed) == [2, 1, 3]\n\n            afArr = array(af, [[1,2,3,4] [5,6,7,8] [9,10,11,12] [13, 14, 15, 16]])\n            afIdx = array(af, [[1.0f0, 0.0f0, 2.0f0] [5.0f0, 10.0f0, 2.0f0]])\n            indexed = afArr[afIdx]\n            @test host(indexed) == [2,1,3,6,11,3]\n\n            # Col, Row\n            afArr = array(af, [[0,1,2] [3,4,5] [6,7,8]])\n\n            @test host(afArr[row(af, 0)]) == [0 3 6]\n            @test host(afArr[row(af, 2)]) == [2 5 8]\n\n            @test host(afArr[rows(af, 0, 1)]) == [[0,1] [3,4] [6,7]]\n\n            @test host(afArr[col(af, 0)]) == [0,1,2]\n            @test host(afArr[col(af, 2)]) == [6,7,8]\n\n            @test host(afArr[cols(af, 1,2)]) == [[3,4,5] [6,7,8]]\n            */\n        });\n    });\n\n    describe('async', function () {\n        let af = null;\n\n        beforeEach(function () {\n            af = new ArrayFire({ async: true });\n            af.scope.begin();\n        });\n\n        afterEach(async(function* () {\n            if (af) {\n                yield af.scope.end();\n                af.release();\n                af = null;\n            }\n        }));\n\n        it('could be created by calling af.array()', async(function* () {\n            let arr;\n            let afArr;\n            let dims;\n            let buff;\n            let refArr;\n\n            arr = [1, 2];\n            afArr = yield af.array(arr);\n            dims = yield afArr.dims();\n            assert.strictEqual(dims[0], 2);\n            assert.strictEqual(dims[1], 1);\n            assert.strictEqual(dims[2], 1);\n            assert.strictEqual(dims[3], 1);\n            assert.strictEqual(dims.elements, 2);\n            assert.strictEqual(dims.ndims, 1);\n            assert.strictEqual(yield afArr.dims(0), 2);\n            assert.strictEqual(yield afArr.dims(1), 1);\n            assert.strictEqual(yield afArr.dims(2), 1);\n            assert.strictEqual(yield afArr.dims(3), 1);\n\n            arr = new Float32Array([1, 2]);\n            afArr = yield af.array(arr);\n            dims = yield afArr.dims();\n            assert.strictEqual(dims[0], 2);\n            assert.strictEqual(dims[1], 1);\n            assert.strictEqual(dims[2], 1);\n            assert.strictEqual(dims[3], 1);\n            assert.strictEqual(dims.elements, 2);\n            assert.strictEqual(dims.ndims, 1);\n            assert.strictEqual(yield afArr.dims(0), 2);\n            assert.strictEqual(yield afArr.dims(1), 1);\n            assert.strictEqual(yield afArr.dims(2), 1);\n            assert.strictEqual(yield afArr.dims(3), 1);\n            buff = yield afArr.host();\n            assert(Buffer.isBuffer(buff));\n            refArr = new FloatArray(buff);\n            assert.equal(refArr.length, 2);\n            assert.equal(refArr.get(0), 1);\n            assert.equal(refArr.get(1), 2);\n            refArr.set(0, 0);\n            refArr.set(1, 0);\n            assert.equal(refArr.get(0), 0);\n            assert.equal(refArr.get(1), 0);\n            yield afArr.host(refArr.buffer);\n            assert.equal(refArr.length, 2);\n            assert.equal(refArr.get(0), 1);\n            assert.equal(refArr.get(1), 2);\n\n            arr = new FloatArray(2);\n            arr.set(0, 1);\n            arr.set(1, 2);\n            afArr = yield af.array(af.dim4(1, 2), arr.buffer);\n            dims = yield afArr.dims();\n            assert.strictEqual(dims[0], 1);\n            assert.strictEqual(dims[1], 2);\n            assert.strictEqual(dims[2], 1);\n            assert.strictEqual(dims[3], 1);\n            assert.strictEqual(dims.elements, 2);\n            assert.strictEqual(dims.ndims, 2);\n\n            afArr = yield af.array(af.dim4(3), af.dtype.s32);\n            dims = yield afArr.dims();\n            assert.strictEqual(dims[0], 3);\n            assert.strictEqual(dims[1], 1);\n            assert.strictEqual(dims[2], 1);\n            assert.strictEqual(dims[3], 1);\n            assert.strictEqual(dims.elements, 3);\n            assert.strictEqual(dims.ndims, 1);\n            buff = yield afArr.host();\n            assert(Buffer.isBuffer(buff));\n            refArr = new IntArray(buff);\n            assert.equal(refArr.length, 3);\n\n            afArr = yield af.array(af.dim4(1, 3));\n            dims = yield afArr.dims();\n            assert.strictEqual(dims[0], 1);\n            assert.strictEqual(dims[1], 3);\n            assert.strictEqual(dims[2], 1);\n            assert.strictEqual(dims[3], 1);\n            assert.strictEqual(dims.elements, 3);\n            assert.strictEqual(dims.ndims, 2);\n            assert.strictEqual(yield afArr.type(), af.dtype.f32);\n            assert.strictEqual(yield afArr.refType(), ref.types.float);\n\n            arr = [1, 2, 3, 4];\n            afArr = yield af.array(af.dim4(1, 1, 4), arr, af.dtype.s32);\n            dims = yield afArr.dims();\n            assert.strictEqual(dims[0], 1);\n            assert.strictEqual(dims[1], 1);\n            assert.strictEqual(dims[2], 4);\n            assert.strictEqual(dims[3], 1);\n            assert.strictEqual(dims.elements, 4);\n            assert.strictEqual(dims.ndims, 3);\n            buff = yield afArr.host();\n            assert(Buffer.isBuffer(buff));\n            refArr = new IntArray(buff);\n            assert.equal(refArr.length, 4);\n            assert.equal(refArr.get(0), 1);\n            assert.equal(refArr.get(1), 2);\n            assert.equal(refArr.get(2), 3);\n            assert.equal(refArr.get(3), 4);\n        }));\n    });\n});"]}