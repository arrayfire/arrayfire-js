{"version":3,"sources":["../es6/device.js"],"names":["fastcall","require","ref","module","exports","af","lib","_lib","intf","interface","declare","deviceInfo","_makeFunction","name","Buffer","platform","toolkit","compute","outName","outPlatform","outToolkit","outCompute","fill","af_device_info","value","readCString","isSymbolExists","infoString","infoPtr","alloc","verbose","af_info_string","deref","getDeviceCount","res","types","int","af_get_device_count","setDevice","id","af_set_device","getDevice","af_get_device","setSeed","seed","af_set_seed","sync","deviceId","af_sync"],"mappings":"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","file":"device.js","sourcesContent":["'use strict';\nconst fastcall = require('fastcall');\nconst ref = fastcall.ref;\n\nmodule.exports = function (af) {\n    const lib = af._lib;\n    const intf = lib.interface;\n\n    // deviceInfo\n\n    lib.declare('int af_device_info(CString name, CString platform, CString toolkit, CString compute)');\n\n    af.deviceInfo = af._makeFunction(\n        function () {\n            this.name = new Buffer(512);\n            this.platform = new Buffer(512);\n            this.toolkit = new Buffer(512);\n            this.compute = new Buffer(512);\n        },\n        function (name, platform, toolkit, compute) {\n            this.outName = name;\n            this.outPlatform = platform;\n            this.outToolkit = toolkit;\n            this.outCompute = compute;\n\n            this.name.fill(0);\n            this.platform.fill(0);\n            this.toolkit.fill(0);\n            this.compute.fill(0);\n\n            return intf.af_device_info(this.name, this.platform, this.toolkit, this.compute);\n        },\n        function () {\n            this.outName && (this.outName.value = ref.readCString(this.name));\n            this.outPlatform && (this.outPlatform.value = ref.readCString(this.platform));\n            this.outToolkit && (this.outToolkit.value = ref.readCString(this.toolkit));\n            this.outCompute && (this.outCompute.value = ref.readCString(this.compute));\n        });\n\n    // infoString\n\n    if (lib.isSymbolExists('af_info_string')) {\n        lib.declare('int af_info_string(char** result, bool verbose)');\n\n        af.infoString = af._makeFunction(\n            function () {\n                this.infoPtr = ref.alloc('char*');\n            },\n            function (verbose = false) {\n                return intf.af_info_string(this.infoPtr);\n            },\n            function () {\n                return ref.readCString(this.infoPtr.deref());\n            }\n        );\n    }\n    else {\n        af.infoString = af._makeFunction(\n            function () {\n                this.outName = { value: null };\n                this.outPlatform = { value: null };\n                this.outToolkit = { value: null };\n                this.outCompute = { value: null };\n            },\n            function () {\n                return af.deviceInfo(this.outName, this.outPlatform, this.outToolkit, this.outCompute);\n            },\n            function () {\n                return `name: ${ this.outName.value }, ' +\n                    'platform: ${ this.outPlatform.value }, ' +\n                    'toolkit: ${ this.outToolkit.value }, ' + \n                    'compute: ${ this.outCompute.value }`;\n            });\n    }\n\n    // getDeviceCount\n\n    lib.declare('int af_get_device_count(int* id)');\n\n    af.getDeviceCount = af._makeFunction(\n        function () {\n            this.res = ref.alloc(ref.types.int);\n        },\n        function () {\n            return intf.af_get_device_count(this.res);\n        },\n        function () {\n            return this.res.deref();\n        });\n\n    // setDevice\n\n    lib.declare('int af_set_device(int id)');\n\n    af.setDevice = af._makeFunction(\n        function (id) {\n            return intf.af_set_device(id);\n        });\n\n    // getDevice\n\n    lib.declare('int af_get_device(int* id)');\n\n    af.getDevice = af._makeFunction(\n        function () {\n            this.res = ref.alloc(ref.types.int);\n        },\n        function () {\n            return intf.af_get_device(this.res);\n        },\n        function () {\n            return this.res.deref();\n        });\n\n    // setSeed\n\n    lib.declare('int af_set_seed(uint64 seed)');\n\n    af.setSeed = af._makeFunction(\n        function (seed) {\n            return intf.af_set_seed(seed);\n        });\n\n    // sync\n\n    lib.declare('int af_sync(int deviceId)');\n\n    af.sync = af._makeFunction(\n        function (deviceId = -1) {\n            return intf.af_sync(deviceId);\n        });\n}"]}