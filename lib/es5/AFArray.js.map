{"version":3,"sources":["../es6/AFArray.js"],"names":["fastcall","require","ref","errors","assert","Disposable","handleType","refType","AFArray","af","lib","_lib","intf","interface","declare","releaseArray","_makeFunction","array","af_release_array","getHandle","_createHandle","dims","arrays","Dims","type","res","alloc","len","Math","min","length","i","set","af_create_handle","unref","argsLen","arguments","handle","module","exports"],"mappings":"AAAA;;;;;;;;;;AACA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,MAAMF,SAASE,GAArB;AACA,IAAMC,SAASF,QAAQ,UAAR,CAAf;AACA,IAAMG,SAASH,QAAQ,QAAR,CAAf;AACA,IAAMI,aAAaL,SAASK,UAA5B;;AAEA,IAAMC,aAAaJ,IAAIK,OAAJ,CAAY,MAAZ,CAAnB;;IAEMC,O;;;;;+BACYC,E,EAAI;AACd,gBAAMC,MAAMD,GAAGE,IAAf;AACA,gBAAMC,OAAOF,IAAIG,SAAjB;;AAEA;;AAEAH,gBAAII,OAAJ,CAAY,iBAAZ;;AAEA;;AAEAJ,gBAAII,OAAJ,CAAY,iCAAZ;;AAEAL,eAAGM,YAAH,GAAkBN,GAAGO,aAAH,CACd,UAAUC,KAAV,EAAiB;AACb,uBAAOL,KAAKM,gBAAL,CAAsBC,UAAUF,KAAV,CAAtB,CAAP;AACH,aAHa,CAAlB;;AAKA;;AAEAP,gBAAII,OAAJ,CAAY,oEAAZ;;AAEAL,eAAGW,aAAH,GAAmBX,GAAGO,aAAH,CACf,YAAY;AACR,qBAAKK,IAAL,GAAYX,IAAIY,MAAJ,CAAWC,IAAX,CAAgBC,IAAhB,CAAqB,CAArB,CAAZ;AACA,qBAAKC,GAAL,GAAWvB,IAAIwB,KAAJ,CAAUpB,UAAV,CAAX;AACH,aAJc,EAKf,YAAiC;AAAA,oBAAvBe,IAAuB,uEAAhB,IAAgB;AAAA,oBAAVG,IAAU,uEAAH,CAAG;;AAC7B,oBAAIG,MAAM,CAAV;AACA,oBAAIN,IAAJ,EAAU;AACNM,0BAAMC,KAAKC,GAAL,CAAS,CAAT,EAAYR,KAAKS,MAAjB,CAAN;AACA,yBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,GAApB,EAAyBI,GAAzB,EAA8B;AAC1B,6BAAKV,IAAL,CAAUW,GAAV,CAAcD,CAAd,EAAiBV,KAAKU,CAAL,CAAjB;AACH;AACJ;AACD,uBAAOnB,KAAKqB,gBAAL,CAAsB,KAAKR,GAA3B,EAAgCE,GAAhC,EAAqC,KAAKN,IAA1C,EAAgDG,IAAhD,CAAP;AACH,aAdc,EAef,YAAY;AACR,uBAAO,KAAKC,GAAL,CAASS,KAAT,EAAP;AACH,aAjBc,CAAnB;;AAmBA;;;;;;;;;;;;AAYA;;AAEAzB,eAAGQ,KAAH,GAAWR,GAAGO,aAAH,CACP,YAAY;AACR,oBAAMmB,UAAUC,UAAUN,MAA1B;;AAEA;AACA,oBAAIK,YAAY,CAAhB,EAAmB;AACf,2BAAOvB,KAAKQ,aAAL,EAAP;AACH;AACJ,aARM,EASP,UAAUiB,MAAV,EAAkB;AACd,uBAAO,IAAI7B,OAAJ,CAAYC,EAAZ,EAAgB4B,MAAhB,CAAP;AACH,aAXM,CAAX;AAYH;;;AAED,qBAAY5B,EAAZ,EAAgB4B,MAAhB,EAAwB;AAAA;;AAAA,sHACd;AAAA,mBAAM5B,GAAGM,YAAH,CAAgBsB,MAAhB,CAAN;AAAA,SADc;;AAGpB,cAAK5B,EAAL,GAAUA,EAAV;AACA,cAAK4B,MAAL,GAAcA,MAAd;AAJoB;AAKvB;;;EA1EiBhC,U;;AA6EtBiC,OAAOC,OAAP,GAAiB/B,OAAjB;;AAEA;;AAEA,SAASW,SAAT,CAAmBF,KAAnB,EAA0B;AACtB,QAAIA,MAAMoB,MAAV,EAAkB;AACd,eAAOpB,MAAMoB,MAAb;AACH;AACD,WAAOpB,KAAP;AACH","file":"AFArray.js","sourcesContent":["'use strict';\nconst fastcall = require('fastcall');\nconst ref = fastcall.ref;\nconst errors = require('./errors');\nconst assert = require('assert');\nconst Disposable = fastcall.Disposable;\n\nconst handleType = ref.refType('void');\n\nclass AFArray extends Disposable {\n    static define(af) {\n        const lib = af._lib;\n        const intf = lib.interface;\n\n        // Dims[]\n\n        lib.declare('longlong[] Dims');\n\n        // releaseArray\n\n        lib.declare('int af_release_array(void* arr)');\n\n        af.releaseArray = af._makeFunction(\n            function (array) {\n                return intf.af_release_array(getHandle(array));\n            });\n\n        // _createHandle\n\n        lib.declare('int af_create_handle(void* arr, uint ndims, Dims[] dims, int type)');\n\n        af._createHandle = af._makeFunction(\n            function () {\n                this.dims = lib.arrays.Dims.type(4);\n                this.res = ref.alloc(handleType);\n            },\n            function (dims = null, type = 0) {\n                let len = 0;\n                if (dims) {\n                    len = Math.min(4, dims.length);\n                    for (let i = 0; i < len; i++) {\n                        this.dims.set(i, dims[i]);\n                    }\n                }\n                return intf.af_create_handle(this.res, len, this.dims, type);\n            },\n            function () {\n                return this.res.unref();\n            });\n\n        /*\n        Libdl.dlsym(ptr, :af_create_array),\n        Libdl.dlsym(ptr, :af_retain_array),\n        Libdl.dlsym(ptr, :af_get_dims),\n        Libdl.dlsym(ptr, :af_get_data_ptr),\n        Libdl.dlsym(ptr, :af_get_type),\n        Libdl.dlsym(ptr, :af_get_numdims),\n        Libdl.dlsym(ptr, :af_get_elements),\n        Libdl.dlsym(ptr, :af_is_empty),\n        Libdl.dlsym(ptr, :af_eval),\n        */\n\n        // ctors\n\n        af.array = af._makeFunction(\n            function () {\n                const argsLen = arguments.length;\n\n                // array()\n                if (argsLen === 0) {\n                    return intf._createHandle();\n                }\n            },\n            function (handle) {\n                return new AFArray(af, handle);\n            });\n    }\n\n    constructor(af, handle) {\n        super(() => af.releaseArray(handle));\n\n        this.af = af;\n        this.handle = handle;\n    }\n}\n\nmodule.exports = AFArray;\n\n// helpers:\n\nfunction getHandle(array) {\n    if (array.handle) {\n        return array.handle;\n    }\n    return array;\n}"]}