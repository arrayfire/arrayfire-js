{"version":3,"sources":["../es6/arrayIndexing.js"],"names":["fastcall","require","ref","typedefs","handleType","helpers","Promise","async","coroutine","Seq","assert","Idx","_","module","exports","af","AFArray","lib","_lib","intf","interface","callAssign","declare","index","_makeFunction","out","alloc","array","idx","asIdx","af_index_gen","getHandle","ndims","buffer","deref","assign","value","undefined","options","arrayHandle","scope","rhs","isNumber","getDims","getType","constant","handle","af_assign_gen"],"mappings":"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","file":"arrayIndexing.js","sourcesContent":["'use strict';\nconst fastcall = require('fastcall');\nconst ref = fastcall.ref;\nconst typedefs = require('./typedefs');\nconst handleType = typedefs.handleType;\nconst helpers = require('./helpers');\nconst Promise = require('bluebird');\nconst async = Promise.coroutine;\nconst Seq = require('./Seq');\nconst assert = require('assert');\nconst Idx = require('./Idx');\nconst _ = require('lodash');\n\nmodule.exports = function (af, AFArray) {\n    const lib = af._lib;\n    const intf = lib.interface;\n\n    let callAssign = null;\n\n    // .get\n\n    lib.declare('int af_index_gen(void** out, void* in, longlong ndims, IndexT* indices)');\n\n    af.index = af._makeFunction(\n        function () {\n            this.out = ref.alloc(handleType);\n        },\n        function (array, idx) {\n            idx = asIdx(idx);\n            return intf.af_index_gen(this.out, helpers.getHandle(array), idx.ndims, idx.buffer);\n        },\n        function () {\n            return this.out.deref();\n        });\n\n    // .set\n\n    lib.declare('int af_assign_gen(void** out, void* lhs, longlong ndims, IndexT* indices, void* rhs)');\n\n    af.assign = af._makeFunction(\n        function () {\n            this.out = ref.alloc(handleType);\n        },\n        function (array, idx, value) {\n            idx = asIdx(idx);\n            assert(value !== undefined, 'Argument \"value\" expected.');\n            return callAssign(this.out, helpers.getHandle(array), idx, value);\n        },\n        function () {\n            return this.out.deref();\n        });\n\n    function asIdx(idx) {\n        if (idx instanceof Idx) {\n            return idx;\n        }\n        return af.idx(idx);\n    }\n\n    if (af.options.async) {\n        callAssign = function (out, arrayHandle, idx, value) {\n            return af.scope.async(function* () {\n                let rhs;\n                if (_.isNumber(value)) {\n                    rhs = (yield af.constant(value, yield af.getDims(arrayHandle), yield af.getType(arrayHandle))).handle;\n                }\n                else {\n                    rhs = helpers.getHandle(value);\n                }\n                return intf.af_assign_gen(out, arrayHandle, idx.ndims, idx.buffer, rhs);\n            });\n        };\n    }\n    else {\n        callAssign = function (out, arrayHandle, idx, value) {\n            return af.scope(() => {\n                let rhs;\n                if (_.isNumber(value)) {\n                    rhs = af.constant(value, af.getDims(arrayHandle), af.getType(arrayHandle)).handle;\n                }\n                else {\n                    rhs = helpers.getHandle(value);\n                }\n                return intf.af_assign_gen(out, arrayHandle, idx.ndims, idx.buffer, rhs);\n            });\n        };\n    }\n};"]}