{"version":3,"sources":["../es6/arrayIndexing.js"],"names":["fastcall","require","ref","typedefs","handleType","helpers","Promise","async","coroutine","Seq","Col","Cols","Row","Rows","assert","module","exports","af","AFArray","lib","_lib","intf","interface","callAssign","declare","index","_makeFunction","out","alloc","indices","arrays","IndexArray","type","ndims","array","args","parseIndexArgs","af_index_gen","getHandle","deref","assign","lhs","rhs","context","i","length","arg","set","seqIndex","span","firstIndex","lastIndex","idx","unions","ArrayOrSeqT","arr","structs","IndexT","isSeq","isBatch","_batch","seq","data","options","scope","_","isNumber","constant","getDims","af_assign_gen"],"mappings":"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","file":"arrayIndexing.js","sourcesContent":["'use strict';\nconst fastcall = require('fastcall');\nconst ref = fastcall.ref;\nconst typedefs = require('./typedefs');\nconst handleType = typedefs.handleType;\nconst helpers = require('./helpers');\nconst Promise = require('bluebird');\nconst async = Promise.coroutine;\nconst Seq = require('./Seq');\nconst Col = require('./Col');\nconst Cols = require('./Cols');\nconst Row = require('./Row');\nconst Rows = require('./Rows');\nconst assert = require('assert');\n\nmodule.exports = function (af, AFArray) {\n    const lib = af._lib;\n    const intf = lib.interface;\n\n    let callAssign = null;\n\n    // .get\n\n    lib.declare('int af_index_gen(void** out, void* in, longlong ndims, IndexT* indices)');\n\n    af.index = af._makeFunction(\n        function () {\n            this.out = ref.alloc(handleType);\n            this.indices = lib.arrays.IndexArray.type(4);\n            this.ndims = 0;\n        },\n        function (array, ...args) {\n            parseIndexArgs(this, args);\n            return intf.af_index_gen(this.out, helpers.getHandle(array), this.ndims, this.indices);\n        },\n        function () {\n            return this.out.deref();\n        });\n\n    // .set\n\n    lib.declare('int af_assign_gen(void** out, void* lhs, longlong ndims, IndexT* indices, void* rhs)');\n\n    af.assign = af._makeFunction(\n        function () {\n            this.out = ref.alloc(handleType);\n            this.indices = lib.arrays.IndexArray.type(4);\n            this.ndims = 0;\n            this.lhs = null;\n            this.rhs = null;\n        },\n        function (array, rhs, ...args) {\n            parseIndexArgs(this, args);\n            return callAssign(this, rhs);\n        },\n        function () {\n            return this.out.deref();\n        });\n\n    function parseIndexArgs(context, args) {\n        for (let i = 0; i < args.length; i++) {\n            const arg = args[i];\n            if (arg >= 0) {\n                context.indices.set(i, seqIndex(new Seq(arg)));\n            }\n            else if (arg instanceof Seq) {\n                context.indices.set(i, seqIndex(arg));\n            }\n            else if (arg === af.span) {\n                context.indices.set(i, seqIndex(new Seq(1, 1, 0)));\n            }\n            else if (arg instanceof Row) {\n                context.indices.set(i++, seqIndex(new Seq(arg.index)));\n                context.indices.set(i, seqIndex(new Seq(1, 1, 0)));\n            }\n            else if (arg instanceof Rows) {\n                context.indices.set(i++, seqIndex(new Seq(arg.firstIndex, arg.lastIndex)));\n                context.indices.set(i, seqIndex(new Seq(1, 1, 0)));\n            }\n            else if (arg instanceof Col) {\n                context.indices.set(i++, seqIndex(new Seq(1, 1, 0)));\n                context.indices.set(i, seqIndex(new Seq(arg.index)));\n            }\n            else if (arg instanceof Cols) {\n                context.indices.set(i++, seqIndex(new Seq(1, 1, 0)));\n                context.indices.set(i, seqIndex(new Seq(arg.firstIndex, arg.lastIndex)));\n            }\n            else {\n                // AFArray\n                const idx = lib.unions.ArrayOrSeqT({\n                    arr: helpers.getHandle(arg)\n                });\n                const index = lib.structs.IndexT({\n                    idx: idx,\n                    isSeq: false,\n                    isBatch: af._batch\n                });\n            }\n        }\n\n        assert(i > 0 && i <= 4, 'Invalid index arguments.');\n        context.ndims = i;\n\n        function seqIndex(seq) {\n            const idx = lib.unions.ArrayOrSeqT({\n                seq: seq.data\n            });\n            const index = lib.structs.IndexT({\n                idx: idx,\n                isSeq: true,\n                isBatch: af._batch\n            });\n            return index;\n        }\n    }\n\n    if (af.options.async) {\n        callAssign = function (context, rhs) {\n            return af.scope.async(function* (context, rhs) {\n                if (_.isNumber(rhs)) {\n                    rhs = yield af.constant(af.getDims(context.lhs), rhs);\n                }\n                return intf.af_assign_gen(context.out, helpers.getHandle(context.lhs), context.ndims, context.indices, helpers.getHandle(rhs));\n            });\n        };\n    }\n    else {\n        callAssign = function (context, rhs) {\n            af.scope(function (context, rhs) {\n                if (_.isNumber(rhs)) {\n                    rhs = af.constant(af.getDims(context.lhs), rhs);\n                }\n                return intf.af_assign_gen(context.out, helpers.getHandle(context.lhs), context.ndims, context.indices, helpers.getHandle(rhs));\n            });\n        };\n    }\n};"]}